/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package com.example.itemservice.controller;

import com.example.itemservice.domain.dto.ItemDto;
import com.example.itemservice.domain.model.Item;
import com.example.itemservice.domain.model.Status;
import com.example.itemservice.service.ItemService;
import com.example.itemservice.service.UserService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Collections;
import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(ItemController.class)
public class ItemControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private ItemService itemService;

    @MockBean
    private UserService userService;

    private Item item;

    @BeforeEach
    void setUp() {
        item = new Item();
        item.setId(1);
        item.setName("Test Item");
        item.setItemText("Test Item Text");
        item.setStatus(Status.Draft);
    }

    @Test
    @WithMockUser(roles = "USER")
    void testCreateItem() throws Exception {
        ItemDto itemDto = new ItemDto("Test Item", "Test Item Text");

        Mockito.when(itemService.add(any(Item.class))).thenReturn(Optional.of(item));

        mockMvc.perform(post("/item/createItem")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"name\":\"Test Item\",\"itemText\":\"Test Item Text\"}"))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.name").value("Test Item"));
    }

    @Test
    @WithMockUser(roles = "USER")
    void testFindSortPageItemsByUser() throws Exception {
        Page<Item> page = new PageImpl<>(Collections.singletonList(item));
        Mockito.when(itemService.findAllItemsByStatusAndUsers(any(PageRequest.class), any(Status.class), any()))
                .thenReturn(page);

        mockMvc.perform(get("/item/sortItemsByUser")
                .param("sortDirection", "0"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.content[0].name").value("Test Item"));
    }

    @Test
    @WithMockUser(roles = "OPERATOR")
    void testFindSortPageItemsByOperator() throws Exception {
        Page<Item> page = new PageImpl<>(Collections.singletonList(item));
        Mockito.when(itemService.findAllItemsByStatusAndUsers(any(PageRequest.class), any(Status.class), any()))
                .thenReturn(page);

        mockMvc.perform(get("/item/sortItemsByOperator")
                .param("sortDirection", "0")
                .param("userName", ""))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.content[0].name").value("Test Item"));
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package com.example.itemservice.service;

import com.example.itemservice.domain.dto.ItemDto;
import com.example.itemservice.domain.model.Item;
import com.example.itemservice.domain.model.Status;
import com.example.itemservice.domain.model.User;
import com.example.itemservice.repository.ItemRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class ItemServiceTest {

    @Mock
    private ItemRepository itemRepository;

    @Mock
    private UserServiceData userService;

    @InjectMocks
    private ItemServiceData itemService;

    private Item item;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        item = new Item();
        item.setId(1);
        item.setName("Test Item");
        item.setItemText("Test Item Text");
        item.setStatus(Status.Draft);
    }

    @Test
    void testAddItemDto() {
        ItemDto itemDto = new ItemDto("Test Item", "Test Item Text");
        User user = new User();
        when(userService.getCurrentUser()).thenReturn(user);
        when(itemRepository.save(any(Item.class))).thenReturn(item);

        Item createdItem = itemService.addItemDto(itemDto);

        assertNotNull(createdItem);
        assertEquals("Test Item", createdItem.getName());
        verify(itemRepository, times(1)).save(any(Item.class));
    }

    @Test
    void testFindById() {
        when(itemRepository.findById(anyInt())).thenReturn(Optional.of(item));

        Optional<Item> foundItem = itemService.findById(1);

        assertTrue(foundItem.isPresent());
        assertEquals("Test Item", foundItem.get().getName());
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package com.example.itemservice.repository;

import com.example.itemservice.domain.model.Item;
import com.example.itemservice.domain.model.Status;
import com.example.itemservice.domain.model.User;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

@DataJpaTest
public class ItemRepositoryTest {

    @Autowired
    private ItemRepository itemRepository;

    @Test
    void testFindAllItemsByStatusAndUsersIn() {
        User user = new User();
        user.setUsername("testUser");

        Item item = new Item();
        item.setName("Test Item");
        item.setItemText("Test Item Text");
        item.setStatus(Status.Draft);
        item.setUsers(List.of(user));

        itemRepository.save(item);

        var items = itemRepository.findAllItemsByStatusAndUsersIn(
                PageRequest.of(0, 5, Sort.by(Sort.Order.asc("created"))),
                Status.Draft,
                List.of(user)
        );

        assertFalse(items.isEmpty());
        assertEquals("Test Item", items.getContent().get(0).getName());
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package com.example.itemservice.controller;

import com.example.itemservice.domain.dto.SignInRequest;
import com.example.itemservice.domain.dto.SignUpRequest;
import com.example.itemservice.service.AuthenticationServiceData;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(AuthController.class)
public class AuthControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private AuthenticationService authenticationService;

    @Test
    void testSignUp() throws Exception {
        SignUpRequest signUpRequest = new SignUpRequest("testUser", "password", "email@example.com", "1234567890");

        mockMvc.perform(post("/auth/sign-up")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"username\":\"testUser\",\"password\":\"password\",\"email\":\"email@example.com\",\"phone\":\"1234567890\"}"))
                .andExpect(status().isOk());
    }

    @Test
    void testSignIn() throws Exception {
        SignInRequest signInRequest = new SignInRequest("testUser", "password");

        mockMvc.perform(post("/auth/sign-in")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"username\":\"testUser\",\"password\":\"password\"}"))
                .andExpect(status().isOk());
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////